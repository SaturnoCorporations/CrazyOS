;========================================
;Crazy ELEMENTS DRAW lib
;========================================

%IFNDEF _DRAWER_
%DEFINE _DRAWER_

LoadingBarWidht dw 0020h
LoadingBarHeight dw 0010h
LoadingBarPositionX dw 0000h
LoadingBarPositionY dw 0000h
LoadingBarColor db 17
StateLoadBar dw 0000h
StartButtonState db 0
StateWallppDrawX db 0
StateWallppDrawY db 0
SysMesage1 db "Iniciando o Sistema!", 0
SysMesage2 db "Loucuras te", 0
SysMesage3 db "Aguardam!", 0
SysMesage4 db "Preparando seu Desktop...", 0
SysMesage5 db "Carregando Dados Pessoais...", 0
SysMenu1 db "Pressione F1 para Desligar", 0
SysMenu2 db "Pressione F2 e veja sobre o sistema", 0
SysMenu3 db "Pressione ESC para Voltar ao sistema", 0
SysInfo1 db "FileSystem FAT16", 0
SysInfo2 db "System date:25\09\2023 19:34 AM", 0
SysInfo3 db "Developer:Rick Moreira", 0
SysInfo4 db "Press ESC to Return", 0

DrawBackgroundWallpaper:
	int 10h
	inc cx
	cmp cx, WORD[BackWidht]
	jne DrawBackgroundWallpaper
	mov cx, 0
	inc dx
	cmp dx, WORD[BackHeight]
	jne DrawBackgroundWallpaper
	mov dx, 0
	;JMP DRAWWPP
RET
	



%MACRO DrawPixel 3
	mov ah, 0Ch
	mov cx, %1
	mov dx, %2
	mov al, %3
	int 10h
%ENDMACRO

LoadingBar:
	mov word[LoadingBarPositionX], 0
	mov ax, word[BackHeight]
	sub ax, 9
	mov word[LoadingBarPositionY], ax
	mov ax, word[BackWidht]
	mov word[LoadingBarWidht], ax
	xor ax, ax
PutYourPosition:
	mov ah, 0Ch
	mov al, byte[LoadingBarColor]
	mov cx, word[LoadingBarPositionX]
	mov dx, word[LoadingBarPositionY]
	jmp LoadBarRoutines
ret
LoadBarRoutines:
	mov al, byte[LoadingBarColor]
	mov bx, word[LoadingBarWidht]
	add bx, cx
	push ax
	mov ax, dx
	add ax, 9
	mov word[StateLoadBar], ax
	pop ax
	DrawLB:
		int 10h
		inc cx
		cmp cx, bx
		jne DrawLB
		int 10h
		inc dx
		inc al
		cmp dx, word[StateLoadBar]
		jne BackColumn
		mov al, byte[LoadingBarColor]
		mov bx, word[LoadingBarPositionY]
		add bx, 8
ret
	BackColumn:
		mov cx, word[LoadingBarPositionX]
		mov bx, word[LoadingBarWidht]
		add bx, cx
		push bx
		mov bx, word[StateLoadBar]
		sub bx, 6
		cmp dx, bx
		ja IncColorAgain
		pop bx
		jmp DrawLB
	IncColorAgain:
		pop bx
		inc al
		jmp DrawLB
	
TaskBar:
	mov word[LoadingBarPositionX], 0
	mov word[LoadingBarHeight], 10
	mov ax, word[BackHeight]
	sub ax, word[LoadingBarHeight]
	mov word[LoadingBarPositionY], ax
	mov ax, word[BackWidht]
	mov word[LoadingBarWidht], ax
	xor ax, ax
PutYourPosition2:
	mov ah, 0Ch
	mov al, byte[LoadingBarColor]
	mov cx, word[LoadingBarPositionX]
	mov dx, word[LoadingBarPositionY]
	jmp TaskBarRoutines
ret
TaskBarRoutines:
	mov al, byte[LoadingBarColor]
	mov bx, word[LoadingBarWidht]
	add bx, cx
	push ax
	mov ax, dx
	add ax, word[LoadingBarHeight]
	mov word[StateLoadBar], ax
	pop ax
	DrawTB:
		int 10h
		inc cx
		cmp cx, bx
		jne DrawTB
		int 10h
		inc dx
		;inc al
		cmp dx, word[StateLoadBar]
		jne BackColumn2
		mov al, byte[LoadingBarColor]
		mov bx, word[LoadingBarPositionY]
		add bx, word[LoadingBarHeight]
		cmp byte[StartButtonState], 1
		je Returner
		call StartButton	
Returner:
ret

	BackColumn2:
		mov cx, word[LoadingBarPositionX]
		mov bx, word[LoadingBarWidht]
		add bx, cx
		push bx
		mov bx, word[StateLoadBar]
		sub bx, 6
		cmp dx, bx
		ja IncColorAgain2
		pop bx
		jmp DrawTB
	IncColorAgain2:
		pop bx
		;inc al
		jmp DrawTB
		
		
StartButton:
	;BlackBorder
	mov byte[StartButtonState], 1
	mov word[LoadingBarPositionX], 1
	mov ax, word[BackHeight]
	sub ax, 9
	mov word[LoadingBarPositionY], ax
	mov word[LoadingBarWidht], 8
	mov word[LoadingBarHeight], 8
	xor ax, ax
	mov byte[LoadingBarColor], 15
	call PutYourPosition2
	;WhiteBorder
	mov word[LoadingBarPositionX], 2
	mov ax, word[BackHeight]
	sub ax, 8
	mov word[LoadingBarPositionY], ax
	mov word[LoadingBarWidht], 7
	mov word[LoadingBarHeight], 7
	xor ax, ax
	mov byte[LoadingBarColor], 0
	call PutYourPosition2
	mov word[LoadingBarPositionX], 2
	mov ax, word[BackHeight]
	sub ax, 8
	mov word[LoadingBarPositionY], ax
	mov word[LoadingBarWidht], 6
	mov word[LoadingBarHeight], 6
	xor ax, ax
	mov byte[LoadingBarColor], 13
	call PutYourPosition2
ret

IconsBar:
	mov ax, word[BackWidht]
	sub ax, 75
	mov word[LoadingBarPositionX], ax
	mov ax, word[BackHeight]
	sub ax, 10
	mov word[LoadingBarPositionY], ax
	mov word[LoadingBarWidht], 74
	mov word[LoadingBarHeight], 10
	xor ax, ax
	mov byte[LoadingBarColor], 15
	call PutYourPosition2	
	mov ax, word[BackWidht]
	sub ax, 74
	mov word[LoadingBarPositionX], ax
	mov ax, word[BackHeight]
	sub ax, 9
	mov word[LoadingBarPositionY], ax
	mov word[LoadingBarWidht], 73
	mov word[LoadingBarHeight], 10
	xor ax, ax
	mov byte[LoadingBarColor], 0
	call PutYourPosition2
	mov ax, word[BackWidht]
	sub ax, 74
	mov word[LoadingBarPositionX], ax
	mov ax, word[BackHeight]
	sub ax, 9
	mov word[LoadingBarPositionY], ax
	mov word[LoadingBarWidht], 72
	mov word[LoadingBarHeight], 8
	xor ax, ax
	mov byte[LoadingBarColor], 34
	call PutYourPosition2
ret	
		
%ENDIF